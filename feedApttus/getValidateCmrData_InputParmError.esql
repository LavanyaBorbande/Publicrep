

CREATE COMPUTE MODULE getValidateCmrData_InputParmError
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		DECLARE I INTEGER;
  		DECLARE success BOOLEAN;
  		DECLARE messageNumber integer;
		DECLARE messageText char;
		DECLARE iIndex REFERENCE TO InputLocalEnvironment.REST.Input.Parameters;
  		SET I = CARDINALITY(InputExceptionList.*[]);
  		IF I > 0 THEN
  			CALL getLastExceptionDetail(InputExceptionList, messageNumber, messageText);
  			SET OutputRoot.JSON.Data.esuccess = false;
  			SET OutputRoot.JSON.Data.emessage = messageText ;
  		ELSE
  			SET OutputRoot.JSON.Data.success = false;
  			SET OutputRoot.JSON.Data.message =
  				CASE
  				WHEN ((LENGTH(iIndex.issuingCountryCode) <> 3) AND (LENGTH(iIndex.customerNumber) <= 10)) THEN 'Country Code should be 3 digits'
  				WHEN ((LENGTH(iIndex.issuingCountryCode) = 3) AND (LENGTH(iIndex.customerNumber) > 10)) THEN 'Customer Number should not be more than 10 digits'
  				WHEN ((LENGTH(iIndex.issuingCountryCode) <> 3) AND (LENGTH(iIndex.customerNumber) > 10)) THEN 'Country Code should be 3 digits & Customer Number should not be more than 10 digits'
  				WHEN ((LENGTH(iIndex.issuingCountryCode) <> 3) AND (LENGTH(iIndex.customerName) <=30)) THEN 'Country Code should be 3 digits'
  				WHEN ((LENGTH(iIndex.issuingCountryCode) = 3) AND (LENGTH(iIndex.customerName) > 30)) THEN 'Customer Name should not be more than 30 letters'
  				WHEN ((LENGTH(iIndex.issuingCountryCode) <> 3) AND (LENGTH(iIndex.customerName) > 30)) THEN 'Country Code should be 3 digits & Customer Name should not be more than 30 letters'
  				ELSE 'Incorrect search criteria supplied'
  			END;
  		END IF;
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
	
	CREATE PROCEDURE getLastExceptionDetail(IN InputTree reference,OUT messageNumber integer,OUT messageText char)	
    /****************************************************************************
	 * A procedure that will get the details of the last exception from a message
	 * IN InputTree:  The incoming exception list
	 * IN messageNumber:  The last message numberr.
	 * IN messageText: The last message text.
	 *****************************************************************************/
   BEGIN
   	    -- Create a reference to the first child of the exception list
   	    declare ptrException reference to InputTree.*[1];
   	    -- keep looping while the moves to the child of exception list work 
		WHILE lastmove(ptrException) DO
			-- store the current values for the error number and text
			IF ptrException.Number is not null THEN
        		SET messageNumber = ptrException.Number;
        		SET messageText = ptrException.Text;
  			END IF;
  			-- now move to the last child which should be the next exceptionlist
			move ptrException lastchild;
		END WHILE; 
	END;
END MODULE;
